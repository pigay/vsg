import sys
import vsg

HK3_0_1_2 = 0
HK3_6_2_7 = 1
HK3_6_7_2 = 2
HK3_0_1_4 = 3
HK3_6_4_7 = 4
HK3_5_1_4 = 5
HK3_0_2_1 = 6
HK3_3_1_7 = 7
HK3_5_1_7 = 8
HK3_6_2_4 = 9
HK3_3_2_1 = 10
HK3_3_7_1 = 11
HK3_5_7_4 = 12
HK3_6_4_2 = 13
HK3_0_2_4 = 14
HK3_3_7_2 = 15
HK3_5_7_1 = 16
HK3_5_4_1 = 17
HK3_3_2_7 = 18
HK3_0_4_2 = 19
HK3_0_4_1 = 20
HK3_6_7_4 = 21
HK3_3_1_2 = 22
HK3_5_4_7 = 23


s = {
    HK3_0_1_2 : [0, 1, 5, 4, 6, 7, 3, 2, ],
    HK3_6_2_7 : [6, 2, 0, 4, 5, 1, 3, 7, ],
    HK3_6_7_2 : [6, 7, 5, 4, 0, 1, 3, 2, ],
    HK3_0_1_4 : [0, 1, 3, 2, 6, 7, 5, 4, ],
    HK3_6_4_7 : [6, 4, 0, 2, 3, 1, 5, 7, ],
    HK3_5_1_4 : [5, 1, 3, 7, 6, 2, 0, 4, ],
    HK3_0_2_1 : [0, 2, 6, 4, 5, 7, 3, 1, ],
    HK3_3_1_7 : [3, 1, 0, 2, 6, 4, 5, 7, ],
    HK3_5_1_7 : [5, 1, 0, 4, 6, 2, 3, 7, ],
    HK3_6_2_4 : [6, 2, 3, 7, 5, 1, 0, 4, ],
    HK3_3_2_1 : [3, 2, 6, 7, 5, 4, 0, 1, ],
    HK3_3_7_1 : [3, 7, 6, 2, 0, 4, 5, 1, ],
    HK3_5_7_4 : [5, 7, 3, 1, 0, 2, 6, 4, ],
    HK3_6_4_2 : [6, 4, 5, 7, 3, 1, 0, 2, ],
    HK3_0_2_4 : [0, 2, 3, 1, 5, 7, 6, 4, ],
    HK3_3_7_2 : [3, 7, 5, 1, 0, 4, 6, 2, ],
    HK3_5_7_1 : [5, 7, 6, 4, 0, 2, 3, 1, ],
    HK3_5_4_1 : [5, 4, 6, 7, 3, 2, 0, 1, ],
    HK3_3_2_7 : [3, 2, 0, 1, 5, 4, 6, 7, ],
    HK3_0_4_2 : [0, 4, 5, 1, 3, 7, 6, 2, ],
    HK3_0_4_1 : [0, 4, 6, 2, 3, 7, 5, 1, ],
    HK3_6_7_4 : [6, 7, 3, 2, 0, 1, 5, 4, ],
    HK3_3_1_2 : [3, 1, 5, 7, 6, 4, 0, 2, ],
    HK3_5_4_7 : [5, 4, 0, 1, 3, 2, 6, 7, ],
    }

d = {
    HK3_0_1_2 : [HK3_0_2_1, HK3_0_2_4, HK3_0_1_2, HK3_3_2_7, HK3_5_4_1,
                 HK3_0_1_2, HK3_6_4_2, HK3_3_1_2, ],
    HK3_6_2_7 : [HK3_6_7_2, HK3_6_7_4, HK3_6_2_7, HK3_3_7_1, HK3_0_4_2,
                 HK3_6_2_7, HK3_5_4_7, HK3_3_2_7, ],
    HK3_6_7_2 : [HK3_6_2_7, HK3_6_2_4, HK3_6_7_2, HK3_3_2_1, HK3_5_4_7,
                 HK3_6_7_2, HK3_0_4_2, HK3_3_7_2, ],
    HK3_0_1_4 : [HK3_0_4_1, HK3_0_4_2, HK3_0_1_4, HK3_5_4_7, HK3_3_2_1,
                 HK3_0_1_4, HK3_6_2_4, HK3_5_1_4, ],
    HK3_6_4_7 : [HK3_6_7_4, HK3_6_7_2, HK3_6_4_7, HK3_5_7_1, HK3_0_2_4,
                 HK3_6_4_7, HK3_3_2_7, HK3_5_4_7, ],
    HK3_5_1_4 : [HK3_5_4_1, HK3_5_4_7, HK3_5_1_4, HK3_0_4_2, HK3_3_7_1,
                 HK3_5_1_4, HK3_6_7_4, HK3_0_1_4, ],
    HK3_0_2_1 : [HK3_0_1_2, HK3_0_1_4, HK3_0_2_1, HK3_3_1_7, HK3_6_4_2,
                 HK3_0_2_1, HK3_5_4_1, HK3_3_2_1, ],
    HK3_3_1_7 : [HK3_3_7_1, HK3_3_7_2, HK3_3_1_7, HK3_5_7_4, HK3_0_2_1,
                 HK3_3_1_7, HK3_6_2_7, HK3_5_1_7, ],
    HK3_5_1_7 : [HK3_5_7_1, HK3_5_7_4, HK3_5_1_7, HK3_3_7_2, HK3_0_4_1,
                 HK3_5_1_7, HK3_6_4_7, HK3_3_1_7, ],
    HK3_6_2_4 : [HK3_6_4_2, HK3_6_4_7, HK3_6_2_4, HK3_0_4_1, HK3_3_7_2,
                 HK3_6_2_4, HK3_5_7_4, HK3_0_2_4, ],
    HK3_3_2_1 : [HK3_3_1_2, HK3_3_1_7, HK3_3_2_1, HK3_0_1_4, HK3_6_7_2,
                 HK3_3_2_1, HK3_5_7_1, HK3_0_2_1, ],
    HK3_3_7_1 : [HK3_3_1_7, HK3_3_1_2, HK3_3_7_1, HK3_5_1_4, HK3_6_2_7,
                 HK3_3_7_1, HK3_0_2_1, HK3_5_7_1, ],
    HK3_5_7_4 : [HK3_5_4_7, HK3_5_4_1, HK3_5_7_4, HK3_6_4_2, HK3_3_1_7,
                 HK3_5_7_4, HK3_0_1_4, HK3_6_7_4, ],
    HK3_6_4_2 : [HK3_6_2_4, HK3_6_2_7, HK3_6_4_2, HK3_0_2_1, HK3_5_7_4,
                 HK3_6_4_2, HK3_3_7_2, HK3_0_4_2, ],
    HK3_0_2_4 : [HK3_0_4_2, HK3_0_4_1, HK3_0_2_4, HK3_6_4_7, HK3_3_1_2,
                 HK3_0_2_4, HK3_5_1_4, HK3_6_2_4, ],
    HK3_3_7_2 : [HK3_3_2_7, HK3_3_2_1, HK3_3_7_2, HK3_6_2_4, HK3_5_1_7,
                 HK3_3_7_2, HK3_0_1_2, HK3_6_7_2, ],
    HK3_5_7_1 : [HK3_5_1_7, HK3_5_1_4, HK3_5_7_1, HK3_3_1_2, HK3_6_4_7,
                 HK3_5_7_1, HK3_0_4_1, HK3_3_7_1, ],
    HK3_5_4_1 : [HK3_5_1_4, HK3_5_1_7, HK3_5_4_1, HK3_0_1_2, HK3_6_7_4,
                 HK3_5_4_1, HK3_3_7_1, HK3_0_4_1, ],
    HK3_3_2_7 : [HK3_3_7_2, HK3_3_7_1, HK3_3_2_7, HK3_6_7_4, HK3_0_1_2,
                 HK3_3_2_7, HK3_5_1_7, HK3_6_2_7, ],
    HK3_0_4_2 : [HK3_0_2_4, HK3_0_2_1, HK3_0_4_2, HK3_6_2_7, HK3_5_1_4,
                 HK3_0_4_2, HK3_3_1_2, HK3_6_4_2, ],
    HK3_0_4_1 : [HK3_0_1_4, HK3_0_1_2, HK3_0_4_1, HK3_5_1_7, HK3_6_2_4,
                 HK3_0_4_1, HK3_3_2_1, HK3_5_4_1, ],
    HK3_6_7_4 : [HK3_6_4_7, HK3_6_4_2, HK3_6_7_4, HK3_5_4_1, HK3_3_2_7,
                 HK3_6_7_4, HK3_0_2_4, HK3_5_7_4, ],
    HK3_3_1_2 : [HK3_3_2_1, HK3_3_2_7, HK3_3_1_2, HK3_0_2_4, HK3_5_7_1,
                 HK3_3_1_2, HK3_6_7_2, HK3_0_1_2, ],
    HK3_5_4_7 : [HK3_5_7_4, HK3_5_7_1, HK3_5_4_7, HK3_6_7_2, HK3_0_1_4,
                 HK3_5_4_7, HK3_3_1_7, HK3_6_4_7, ],
    }

# example with bound method
class Toto:
    def hilbert3_order (self, node_key, children, children_keys):
        #print node_key, children, children_keys, 
        for i in range (8):
            children[i] = s[node_key][i]
            children_keys[i] = d[node_key][i]
        #print ",", node_key, children, children_keys

def write (pt, f):
    pt.write (f)
    f.write ("\n")

pts = []

lvl = 1

try:
    lvl = int (sys.argv[1])
except:
    pass

n = 1 << lvl
np = n*n

for i in range (n):
    x = 2. * (i+0.5) / n - 1.
    for j in range (n):
        y = 2. * (j+0.5) / n - 1.

        for k in range (n):
            z = 2. * (k+0.5) / n - 1.

            pts.append (vsg.Vector3d (x, y, z))

lbound = vsg.Vector3d (-1., -1., -1.)
ubound = vsg.Vector3d (1., 1., 1.)

prtree = vsg.PRTree3d (lbound, ubound,
                       vsg.Vector3d.vector3d_locfunc,
                       vsg.Vector3d.dist,
                       None, 1)

for pt in pts:
    #print pt
    prtree.insert_point (pt)

t = Toto ()

prtree.set_children_order (t.hilbert3_order, HK3_0_2_1)

prtree.foreach_point (write, sys.stdout)

prtree.set_children_order (None, None)

